// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: strangelove/horcrux/remote_signer_grpc_server.proto

package proto

import (
	context "context"
	fmt "fmt"
	privval "github.com/cometbft/cometbft/proto/tendermint/privval"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("strangelove/horcrux/remote_signer_grpc_server.proto", fileDescriptor_0adef266737d86b7)
}

var fileDescriptor_0adef266737d86b7 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x3b, 0x91, 0x21, 0x61, 0xa7, 0x78, 0xdb, 0x21, 0xea, 0x04, 0x05, 0xc1, 0x04, 0x9c,
	0x4f, 0xe0, 0x75, 0x20, 0x73, 0x82, 0xa0, 0x97, 0xb1, 0x75, 0x1f, 0x59, 0xa0, 0x4d, 0xe2, 0x97,
	0xb4, 0xb8, 0xb7, 0xf0, 0xb1, 0x3c, 0xee, 0xe8, 0x51, 0xda, 0x17, 0xf0, 0x11, 0x64, 0xed, 0xd2,
	0xed, 0xb0, 0x7a, 0x2a, 0xf4, 0xfb, 0xff, 0x7e, 0x7f, 0xc2, 0xf7, 0x91, 0xa1, 0xf3, 0x38, 0xd3,
	0x12, 0x12, 0x93, 0x83, 0x58, 0x1a, 0x8c, 0x31, 0xfb, 0x10, 0x08, 0xa9, 0xf1, 0x30, 0x75, 0x4a,
	0x6a, 0xc0, 0xa9, 0x44, 0x1b, 0x4f, 0x1d, 0x60, 0x0e, 0xc8, 0x2d, 0x1a, 0x6f, 0xe8, 0xe9, 0x1e,
	0xc4, 0xb7, 0x50, 0x9f, 0x79, 0xd0, 0x0b, 0xc0, 0x54, 0x69, 0x2f, 0x2c, 0xaa, 0x3c, 0x9f, 0x25,
	0xc2, 0xaf, 0x2c, 0xb8, 0x1a, 0xba, 0xfb, 0x3d, 0x22, 0xbd, 0x49, 0x25, 0x7e, 0xae, 0xbc, 0xf4,
	0x89, 0x74, 0xc7, 0xd9, 0x7c, 0x04, 0x2b, 0x7a, 0xc1, 0x77, 0x2c, 0xdf, 0xb2, 0xbc, 0x9e, 0x4d,
	0xe0, 0x3d, 0x03, 0xe7, 0xfb, 0x83, 0xff, 0x22, 0xce, 0x1a, 0xed, 0x60, 0x10, 0xd1, 0x57, 0x72,
	0xb2, 0x91, 0xbf, 0x18, 0x0f, 0xf4, 0xf2, 0x10, 0x11, 0xa6, 0x41, 0x7b, 0xd5, 0x16, 0x82, 0x45,
	0x1d, 0x6b, 0xd4, 0x40, 0x7a, 0x9b, 0xff, 0x63, 0x34, 0xd6, 0xb8, 0x59, 0x42, 0xaf, 0xdb, 0xc8,
	0x90, 0x08, 0x15, 0x37, 0xed, 0x15, 0xbb, 0x68, 0x53, 0x33, 0x22, 0xc7, 0x63, 0xa5, 0x25, 0x3d,
	0x3b, 0xf8, 0x5e, 0xa5, 0x65, 0xd0, 0x9e, 0xb7, 0x07, 0x82, 0xec, 0xe1, 0xf1, 0xab, 0x60, 0x9d,
	0x75, 0xc1, 0x3a, 0x3f, 0x05, 0xeb, 0x7c, 0x96, 0x2c, 0x5a, 0x97, 0x2c, 0xfa, 0x2e, 0x59, 0xf4,
	0x76, 0x2f, 0x95, 0x5f, 0x66, 0x73, 0x1e, 0x9b, 0x54, 0xec, 0x2d, 0xf3, 0x36, 0x07, 0xed, 0x33,
	0x04, 0xd7, 0x9c, 0x42, 0x7d, 0x03, 0xa2, 0x5a, 0xe1, 0xbc, 0x5b, 0x7d, 0x86, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xf2, 0x30, 0xdf, 0xda, 0x35, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteSignerClient is the client API for RemoteSigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteSignerClient interface {
	PubKey(ctx context.Context, in *privval.PubKeyRequest, opts ...grpc.CallOption) (*privval.PubKeyResponse, error)
	SignVote(ctx context.Context, in *privval.SignVoteRequest, opts ...grpc.CallOption) (*privval.SignedVoteResponse, error)
	SignProposal(ctx context.Context, in *privval.SignProposalRequest, opts ...grpc.CallOption) (*privval.SignedProposalResponse, error)
	Ping(ctx context.Context, in *privval.PingRequest, opts ...grpc.CallOption) (*privval.PingResponse, error)
}

type remoteSignerClient struct {
	cc grpc1.ClientConn
}

func NewRemoteSignerClient(cc grpc1.ClientConn) RemoteSignerClient {
	return &remoteSignerClient{cc}
}

func (c *remoteSignerClient) PubKey(ctx context.Context, in *privval.PubKeyRequest, opts ...grpc.CallOption) (*privval.PubKeyResponse, error) {
	out := new(privval.PubKeyResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.RemoteSigner/PubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) SignVote(ctx context.Context, in *privval.SignVoteRequest, opts ...grpc.CallOption) (*privval.SignedVoteResponse, error) {
	out := new(privval.SignedVoteResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.RemoteSigner/SignVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) SignProposal(ctx context.Context, in *privval.SignProposalRequest, opts ...grpc.CallOption) (*privval.SignedProposalResponse, error) {
	out := new(privval.SignedProposalResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.RemoteSigner/SignProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteSignerClient) Ping(ctx context.Context, in *privval.PingRequest, opts ...grpc.CallOption) (*privval.PingResponse, error) {
	out := new(privval.PingResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.RemoteSigner/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteSignerServer is the server API for RemoteSigner service.
type RemoteSignerServer interface {
	PubKey(context.Context, *privval.PubKeyRequest) (*privval.PubKeyResponse, error)
	SignVote(context.Context, *privval.SignVoteRequest) (*privval.SignedVoteResponse, error)
	SignProposal(context.Context, *privval.SignProposalRequest) (*privval.SignedProposalResponse, error)
	Ping(context.Context, *privval.PingRequest) (*privval.PingResponse, error)
}

// UnimplementedRemoteSignerServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteSignerServer struct {
}

func (*UnimplementedRemoteSignerServer) PubKey(ctx context.Context, req *privval.PubKeyRequest) (*privval.PubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKey not implemented")
}
func (*UnimplementedRemoteSignerServer) SignVote(ctx context.Context, req *privval.SignVoteRequest) (*privval.SignedVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignVote not implemented")
}
func (*UnimplementedRemoteSignerServer) SignProposal(ctx context.Context, req *privval.SignProposalRequest) (*privval.SignedProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignProposal not implemented")
}
func (*UnimplementedRemoteSignerServer) Ping(ctx context.Context, req *privval.PingRequest) (*privval.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterRemoteSignerServer(s grpc1.Server, srv RemoteSignerServer) {
	s.RegisterService(&_RemoteSigner_serviceDesc, srv)
}

func _RemoteSigner_PubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.PubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).PubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.RemoteSigner/PubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).PubKey(ctx, req.(*privval.PubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_SignVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.SignVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).SignVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.RemoteSigner/SignVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).SignVote(ctx, req.(*privval.SignVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_SignProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.SignProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).SignProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.RemoteSigner/SignProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).SignProposal(ctx, req.(*privval.SignProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteSigner_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteSignerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.RemoteSigner/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteSignerServer).Ping(ctx, req.(*privval.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteSigner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "strangelove.horcrux.RemoteSigner",
	HandlerType: (*RemoteSignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubKey",
			Handler:    _RemoteSigner_PubKey_Handler,
		},
		{
			MethodName: "SignVote",
			Handler:    _RemoteSigner_SignVote_Handler,
		},
		{
			MethodName: "SignProposal",
			Handler:    _RemoteSigner_SignProposal_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RemoteSigner_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strangelove/horcrux/remote_signer_grpc_server.proto",
}
