// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: strangelove/horcrux/cosigner_grpc_server.proto

package proto

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Block struct {
	Height    int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round     int64  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Step      int32  `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	SignBytes []byte `protobuf:"bytes,4,opt,name=signBytes,proto3" json:"signBytes,omitempty"`
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{0}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Block) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Block) GetSignBytes() []byte {
	if m != nil {
		return m.SignBytes
	}
	return nil
}

func (m *Block) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SignBlockRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Block   *Block `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *SignBlockRequest) Reset()         { *m = SignBlockRequest{} }
func (m *SignBlockRequest) String() string { return proto.CompactTextString(m) }
func (*SignBlockRequest) ProtoMessage()    {}
func (*SignBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{1}
}
func (m *SignBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignBlockRequest.Merge(m, src)
}
func (m *SignBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignBlockRequest proto.InternalMessageInfo

func (m *SignBlockRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *SignBlockRequest) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type SignBlockResponse struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignBlockResponse) Reset()         { *m = SignBlockResponse{} }
func (m *SignBlockResponse) String() string { return proto.CompactTextString(m) }
func (*SignBlockResponse) ProtoMessage()    {}
func (*SignBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{2}
}
func (m *SignBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignBlockResponse.Merge(m, src)
}
func (m *SignBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignBlockResponse proto.InternalMessageInfo

func (m *SignBlockResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Nonce struct {
	SourceID      int32  `protobuf:"varint,1,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	DestinationID int32  `protobuf:"varint,2,opt,name=destinationID,proto3" json:"destinationID,omitempty"`
	PubKey        []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Share         []byte `protobuf:"bytes,4,opt,name=share,proto3" json:"share,omitempty"`
	Signature     []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{3}
}
func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(m, src)
}
func (m *Nonce) XXX_Size() int {
	return m.Size()
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetSourceID() int32 {
	if m != nil {
		return m.SourceID
	}
	return 0
}

func (m *Nonce) GetDestinationID() int32 {
	if m != nil {
		return m.DestinationID
	}
	return 0
}

func (m *Nonce) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Nonce) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *Nonce) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type HRST struct {
	Height    int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round     int64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Step      int32 `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *HRST) Reset()         { *m = HRST{} }
func (m *HRST) String() string { return proto.CompactTextString(m) }
func (*HRST) ProtoMessage()    {}
func (*HRST) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{4}
}
func (m *HRST) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HRST) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HRST.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HRST) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HRST.Merge(m, src)
}
func (m *HRST) XXX_Size() int {
	return m.Size()
}
func (m *HRST) XXX_DiscardUnknown() {
	xxx_messageInfo_HRST.DiscardUnknown(m)
}

var xxx_messageInfo_HRST proto.InternalMessageInfo

func (m *HRST) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *HRST) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *HRST) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *HRST) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SetNoncesAndSignRequest struct {
	Nonces    []*Nonce `protobuf:"bytes,1,rep,name=nonces,proto3" json:"nonces,omitempty"`
	Hrst      *HRST    `protobuf:"bytes,2,opt,name=hrst,proto3" json:"hrst,omitempty"`
	SignBytes []byte   `protobuf:"bytes,3,opt,name=signBytes,proto3" json:"signBytes,omitempty"`
	ChainID   string   `protobuf:"bytes,4,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *SetNoncesAndSignRequest) Reset()         { *m = SetNoncesAndSignRequest{} }
func (m *SetNoncesAndSignRequest) String() string { return proto.CompactTextString(m) }
func (*SetNoncesAndSignRequest) ProtoMessage()    {}
func (*SetNoncesAndSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{5}
}
func (m *SetNoncesAndSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetNoncesAndSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetNoncesAndSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetNoncesAndSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetNoncesAndSignRequest.Merge(m, src)
}
func (m *SetNoncesAndSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetNoncesAndSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetNoncesAndSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetNoncesAndSignRequest proto.InternalMessageInfo

func (m *SetNoncesAndSignRequest) GetNonces() []*Nonce {
	if m != nil {
		return m.Nonces
	}
	return nil
}

func (m *SetNoncesAndSignRequest) GetHrst() *HRST {
	if m != nil {
		return m.Hrst
	}
	return nil
}

func (m *SetNoncesAndSignRequest) GetSignBytes() []byte {
	if m != nil {
		return m.SignBytes
	}
	return nil
}

func (m *SetNoncesAndSignRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type SetNoncesAndSignResponse struct {
	NoncePublic []byte `protobuf:"bytes,1,opt,name=noncePublic,proto3" json:"noncePublic,omitempty"`
	Timestamp   int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature   []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SetNoncesAndSignResponse) Reset()         { *m = SetNoncesAndSignResponse{} }
func (m *SetNoncesAndSignResponse) String() string { return proto.CompactTextString(m) }
func (*SetNoncesAndSignResponse) ProtoMessage()    {}
func (*SetNoncesAndSignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{6}
}
func (m *SetNoncesAndSignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetNoncesAndSignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetNoncesAndSignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetNoncesAndSignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetNoncesAndSignResponse.Merge(m, src)
}
func (m *SetNoncesAndSignResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetNoncesAndSignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetNoncesAndSignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetNoncesAndSignResponse proto.InternalMessageInfo

func (m *SetNoncesAndSignResponse) GetNoncePublic() []byte {
	if m != nil {
		return m.NoncePublic
	}
	return nil
}

func (m *SetNoncesAndSignResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SetNoncesAndSignResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GetNoncesRequest struct {
	Hrst    *HRST  `protobuf:"bytes,1,opt,name=hrst,proto3" json:"hrst,omitempty"`
	ChainID string `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *GetNoncesRequest) Reset()         { *m = GetNoncesRequest{} }
func (m *GetNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*GetNoncesRequest) ProtoMessage()    {}
func (*GetNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{7}
}
func (m *GetNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNoncesRequest.Merge(m, src)
}
func (m *GetNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNoncesRequest proto.InternalMessageInfo

func (m *GetNoncesRequest) GetHrst() *HRST {
	if m != nil {
		return m.Hrst
	}
	return nil
}

func (m *GetNoncesRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type GetNoncesResponse struct {
	Nonces []*Nonce `protobuf:"bytes,1,rep,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *GetNoncesResponse) Reset()         { *m = GetNoncesResponse{} }
func (m *GetNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*GetNoncesResponse) ProtoMessage()    {}
func (*GetNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{8}
}
func (m *GetNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNoncesResponse.Merge(m, src)
}
func (m *GetNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNoncesResponse proto.InternalMessageInfo

func (m *GetNoncesResponse) GetNonces() []*Nonce {
	if m != nil {
		return m.Nonces
	}
	return nil
}

type TransferLeadershipRequest struct {
	LeaderID string `protobuf:"bytes,1,opt,name=leaderID,proto3" json:"leaderID,omitempty"`
}

func (m *TransferLeadershipRequest) Reset()         { *m = TransferLeadershipRequest{} }
func (m *TransferLeadershipRequest) String() string { return proto.CompactTextString(m) }
func (*TransferLeadershipRequest) ProtoMessage()    {}
func (*TransferLeadershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{9}
}
func (m *TransferLeadershipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferLeadershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferLeadershipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferLeadershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferLeadershipRequest.Merge(m, src)
}
func (m *TransferLeadershipRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferLeadershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferLeadershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferLeadershipRequest proto.InternalMessageInfo

func (m *TransferLeadershipRequest) GetLeaderID() string {
	if m != nil {
		return m.LeaderID
	}
	return ""
}

type TransferLeadershipResponse struct {
	LeaderID      string `protobuf:"bytes,1,opt,name=leaderID,proto3" json:"leaderID,omitempty"`
	LeaderAddress string `protobuf:"bytes,2,opt,name=leaderAddress,proto3" json:"leaderAddress,omitempty"`
}

func (m *TransferLeadershipResponse) Reset()         { *m = TransferLeadershipResponse{} }
func (m *TransferLeadershipResponse) String() string { return proto.CompactTextString(m) }
func (*TransferLeadershipResponse) ProtoMessage()    {}
func (*TransferLeadershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{10}
}
func (m *TransferLeadershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferLeadershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferLeadershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferLeadershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferLeadershipResponse.Merge(m, src)
}
func (m *TransferLeadershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferLeadershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferLeadershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferLeadershipResponse proto.InternalMessageInfo

func (m *TransferLeadershipResponse) GetLeaderID() string {
	if m != nil {
		return m.LeaderID
	}
	return ""
}

func (m *TransferLeadershipResponse) GetLeaderAddress() string {
	if m != nil {
		return m.LeaderAddress
	}
	return ""
}

type GetLeaderRequest struct {
}

func (m *GetLeaderRequest) Reset()         { *m = GetLeaderRequest{} }
func (m *GetLeaderRequest) String() string { return proto.CompactTextString(m) }
func (*GetLeaderRequest) ProtoMessage()    {}
func (*GetLeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{11}
}
func (m *GetLeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaderRequest.Merge(m, src)
}
func (m *GetLeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaderRequest proto.InternalMessageInfo

type GetLeaderResponse struct {
	Leader string `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (m *GetLeaderResponse) Reset()         { *m = GetLeaderResponse{} }
func (m *GetLeaderResponse) String() string { return proto.CompactTextString(m) }
func (*GetLeaderResponse) ProtoMessage()    {}
func (*GetLeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483b277446a7eb, []int{12}
}
func (m *GetLeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaderResponse.Merge(m, src)
}
func (m *GetLeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaderResponse proto.InternalMessageInfo

func (m *GetLeaderResponse) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func init() {
	proto.RegisterType((*Block)(nil), "strangelove.horcrux.Block")
	proto.RegisterType((*SignBlockRequest)(nil), "strangelove.horcrux.SignBlockRequest")
	proto.RegisterType((*SignBlockResponse)(nil), "strangelove.horcrux.SignBlockResponse")
	proto.RegisterType((*Nonce)(nil), "strangelove.horcrux.Nonce")
	proto.RegisterType((*HRST)(nil), "strangelove.horcrux.HRST")
	proto.RegisterType((*SetNoncesAndSignRequest)(nil), "strangelove.horcrux.SetNoncesAndSignRequest")
	proto.RegisterType((*SetNoncesAndSignResponse)(nil), "strangelove.horcrux.SetNoncesAndSignResponse")
	proto.RegisterType((*GetNoncesRequest)(nil), "strangelove.horcrux.GetNoncesRequest")
	proto.RegisterType((*GetNoncesResponse)(nil), "strangelove.horcrux.GetNoncesResponse")
	proto.RegisterType((*TransferLeadershipRequest)(nil), "strangelove.horcrux.TransferLeadershipRequest")
	proto.RegisterType((*TransferLeadershipResponse)(nil), "strangelove.horcrux.TransferLeadershipResponse")
	proto.RegisterType((*GetLeaderRequest)(nil), "strangelove.horcrux.GetLeaderRequest")
	proto.RegisterType((*GetLeaderResponse)(nil), "strangelove.horcrux.GetLeaderResponse")
}

func init() {
	proto.RegisterFile("strangelove/horcrux/cosigner_grpc_server.proto", fileDescriptor_6e483b277446a7eb)
}

var fileDescriptor_6e483b277446a7eb = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0xde, 0xee, 0xb6, 0x2b, 0xfb, 0xc0, 0x04, 0x46, 0x83, 0xa5, 0x31, 0x9b, 0x4d, 0xa3, 0x86,
	0x44, 0xe9, 0x2a, 0x9a, 0x78, 0x06, 0x4d, 0xd0, 0x68, 0x88, 0x29, 0x9c, 0x94, 0x40, 0xba, 0xdd,
	0xc7, 0xb6, 0x71, 0x69, 0xcb, 0xcc, 0x14, 0xe1, 0x07, 0x78, 0xe7, 0xe2, 0x3f, 0xf1, 0x47, 0x78,
	0xe4, 0xe8, 0xd1, 0xc0, 0x1f, 0x31, 0x9d, 0x4e, 0x4b, 0x5b, 0x5a, 0xdd, 0x18, 0x4f, 0xbb, 0xef,
	0xf5, 0xbd, 0x79, 0xdf, 0xf7, 0xbe, 0x6f, 0x5a, 0xb0, 0x18, 0xa7, 0x4e, 0x30, 0xc1, 0x69, 0x78,
	0x82, 0x43, 0x2f, 0xa4, 0x2e, 0x8d, 0x4f, 0x87, 0x6e, 0xc8, 0xfc, 0x49, 0x80, 0xf4, 0x60, 0x42,
	0x23, 0xf7, 0x80, 0x21, 0x3d, 0x41, 0x6a, 0x45, 0x34, 0xe4, 0x21, 0xb9, 0x53, 0xa8, 0xb7, 0x64,
	0xbd, 0xf9, 0x55, 0x01, 0x6d, 0x73, 0x1a, 0xba, 0x9f, 0xc9, 0x32, 0x74, 0x3d, 0xf4, 0x27, 0x1e,
	0xd7, 0x95, 0x81, 0xb2, 0xda, 0xb1, 0x65, 0x44, 0xee, 0x82, 0x46, 0xc3, 0x38, 0x18, 0xeb, 0x6d,
	0x91, 0x4e, 0x03, 0x42, 0x40, 0x65, 0x1c, 0x23, 0xbd, 0x33, 0x50, 0x56, 0x35, 0x5b, 0xfc, 0x27,
	0xf7, 0xa1, 0x97, 0x0c, 0xdf, 0x3c, 0xe3, 0xc8, 0x74, 0x75, 0xa0, 0xac, 0x2e, 0xd8, 0xd7, 0x89,
	0xe4, 0x29, 0xf7, 0x8f, 0x90, 0x71, 0xe7, 0x28, 0xd2, 0x35, 0x71, 0xd6, 0x75, 0xc2, 0xdc, 0x87,
	0xc5, 0x9d, 0xa4, 0x34, 0x81, 0x62, 0xe3, 0x71, 0x8c, 0x8c, 0x13, 0x1d, 0x6e, 0xb9, 0x9e, 0xe3,
	0x07, 0x6f, 0x5f, 0x0b, 0x48, 0x3d, 0x3b, 0x0b, 0xc9, 0x53, 0xd0, 0x46, 0x49, 0xa5, 0xc0, 0x34,
	0xbf, 0x6e, 0x58, 0x35, 0xd4, 0xac, 0xf4, 0xac, 0xb4, 0xd0, 0x7c, 0x06, 0x4b, 0x85, 0xf3, 0x59,
	0x14, 0x06, 0x0c, 0x33, 0xc0, 0x0e, 0x8f, 0x29, 0x8a, 0x11, 0x12, 0xb0, 0x48, 0x98, 0xdf, 0x14,
	0xd0, 0xb6, 0xc3, 0xc0, 0x45, 0x62, 0xc0, 0x1c, 0x0b, 0x63, 0xea, 0xa2, 0x44, 0xa2, 0xd9, 0x79,
	0x4c, 0x1e, 0xc0, 0xed, 0x31, 0x32, 0xee, 0x07, 0x0e, 0xf7, 0xc3, 0x04, 0x6a, 0x5b, 0x14, 0x94,
	0x93, 0xc9, 0x72, 0xa3, 0x78, 0xf4, 0x0e, 0xcf, 0xc4, 0xc2, 0x16, 0x6c, 0x19, 0x25, 0xcb, 0x65,
	0x9e, 0x43, 0x51, 0xae, 0x2b, 0x0d, 0xca, 0xb8, 0xb4, 0x2a, 0xae, 0x43, 0x50, 0xdf, 0xd8, 0x3b,
	0xbb, 0xff, 0x47, 0xb0, 0x6b, 0x49, 0xd4, 0xaa, 0x24, 0xdf, 0x15, 0xb8, 0xb7, 0x83, 0x5c, 0xac,
	0x80, 0x6d, 0x04, 0xe3, 0x64, 0x7f, 0x99, 0x34, 0xeb, 0xd0, 0x0d, 0x44, 0x5e, 0x57, 0x06, 0x9d,
	0x46, 0x05, 0x44, 0xab, 0x2d, 0x2b, 0xc9, 0x1a, 0xa8, 0x1e, 0x65, 0x5c, 0x6a, 0xb6, 0x52, 0xdb,
	0x91, 0x10, 0xb3, 0x45, 0x59, 0xd9, 0x4d, 0x9d, 0xaa, 0x9b, 0x0a, 0xde, 0x50, 0x4b, 0xde, 0x30,
	0x4f, 0x41, 0xbf, 0x89, 0x5a, 0x0a, 0x3e, 0x80, 0x79, 0x01, 0xe6, 0x43, 0x3c, 0x9a, 0xfa, 0xae,
	0x94, 0xbc, 0x98, 0x2a, 0xaf, 0xa4, 0x5d, 0x59, 0x49, 0x59, 0x98, 0x4e, 0x55, 0x98, 0x4f, 0xb0,
	0xb8, 0x95, 0x4d, 0xce, 0x16, 0x95, 0x91, 0x56, 0x66, 0x23, 0x5d, 0xa0, 0xd5, 0x2e, 0xd3, 0xda,
	0x82, 0xa5, 0xc2, 0xe1, 0x92, 0xcf, 0x3f, 0xc8, 0x60, 0xbe, 0x84, 0x95, 0x5d, 0xea, 0x04, 0xec,
	0x10, 0xe9, 0x7b, 0x74, 0xc6, 0x48, 0x99, 0xe7, 0x47, 0x19, 0x5c, 0x03, 0xe6, 0xa6, 0x22, 0x99,
	0xdf, 0xb9, 0x3c, 0x36, 0xf7, 0xc1, 0xa8, 0x6b, 0x94, 0x50, 0xfe, 0xd0, 0x99, 0xdc, 0x91, 0xf4,
	0xff, 0xc6, 0x78, 0x4c, 0x91, 0x31, 0xc9, 0xad, 0x9c, 0x34, 0x89, 0x58, 0x5f, 0x7a, 0xb4, 0xc4,
	0x63, 0x3e, 0x16, 0xac, 0xb3, 0x9c, 0x1c, 0xb5, 0x0c, 0xdd, 0xb4, 0x53, 0x0e, 0x92, 0xd1, 0xfa,
	0xb9, 0x0a, 0x73, 0xaf, 0xe4, 0xfb, 0x8f, 0xec, 0x41, 0x2f, 0xbf, 0xf0, 0xe4, 0x61, 0xed, 0x5e,
	0xaa, 0x2f, 0x1c, 0xe3, 0xd1, 0xdf, 0xca, 0x52, 0x00, 0x66, 0x8b, 0x1c, 0xc3, 0x62, 0xd5, 0x64,
	0xe4, 0x49, 0x7d, 0x77, 0xfd, 0x0d, 0x32, 0xd6, 0x66, 0xac, 0xce, 0x47, 0xee, 0x41, 0x2f, 0x37,
	0x40, 0x03, 0xa1, 0xaa, 0xfb, 0x1a, 0x08, 0xdd, 0xf0, 0x91, 0xd9, 0x22, 0x5f, 0x80, 0xdc, 0x14,
	0x97, 0x58, 0xb5, 0xfd, 0x8d, 0xf6, 0x31, 0x86, 0x33, 0xd7, 0x57, 0x68, 0xa5, 0x8f, 0x9a, 0x69,
	0x95, 0x5c, 0xd1, 0x4c, 0xab, 0x6c, 0x14, 0xb3, 0xb5, 0xb9, 0xfd, 0xe3, 0xb2, 0xaf, 0x5c, 0x5c,
	0xf6, 0x95, 0x5f, 0x97, 0x7d, 0xe5, 0xfc, 0xaa, 0xdf, 0xba, 0xb8, 0xea, 0xb7, 0x7e, 0x5e, 0xf5,
	0x5b, 0x1f, 0x5f, 0x4c, 0x7c, 0xee, 0xc5, 0x23, 0xcb, 0x0d, 0x8f, 0x86, 0x85, 0xd3, 0xd6, 0x4e,
	0x30, 0x48, 0x2e, 0x33, 0xcb, 0xbf, 0xa8, 0xa9, 0x9f, 0x86, 0xe2, 0x1b, 0x3a, 0xea, 0x8a, 0x9f,
	0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21, 0xc0, 0x80, 0x16, 0x7c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CosignerClient is the client API for Cosigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CosignerClient interface {
	SignBlock(ctx context.Context, in *SignBlockRequest, opts ...grpc.CallOption) (*SignBlockResponse, error)
	SetNoncesAndSign(ctx context.Context, in *SetNoncesAndSignRequest, opts ...grpc.CallOption) (*SetNoncesAndSignResponse, error)
	GetNonces(ctx context.Context, in *GetNoncesRequest, opts ...grpc.CallOption) (*GetNoncesResponse, error)
	TransferLeadership(ctx context.Context, in *TransferLeadershipRequest, opts ...grpc.CallOption) (*TransferLeadershipResponse, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error)
}

type cosignerClient struct {
	cc grpc1.ClientConn
}

func NewCosignerClient(cc grpc1.ClientConn) CosignerClient {
	return &cosignerClient{cc}
}

func (c *cosignerClient) SignBlock(ctx context.Context, in *SignBlockRequest, opts ...grpc.CallOption) (*SignBlockResponse, error) {
	out := new(SignBlockResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.Cosigner/SignBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerClient) SetNoncesAndSign(ctx context.Context, in *SetNoncesAndSignRequest, opts ...grpc.CallOption) (*SetNoncesAndSignResponse, error) {
	out := new(SetNoncesAndSignResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.Cosigner/SetNoncesAndSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerClient) GetNonces(ctx context.Context, in *GetNoncesRequest, opts ...grpc.CallOption) (*GetNoncesResponse, error) {
	out := new(GetNoncesResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.Cosigner/GetNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerClient) TransferLeadership(ctx context.Context, in *TransferLeadershipRequest, opts ...grpc.CallOption) (*TransferLeadershipResponse, error) {
	out := new(TransferLeadershipResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.Cosigner/TransferLeadership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error) {
	out := new(GetLeaderResponse)
	err := c.cc.Invoke(ctx, "/strangelove.horcrux.Cosigner/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosignerServer is the server API for Cosigner service.
type CosignerServer interface {
	SignBlock(context.Context, *SignBlockRequest) (*SignBlockResponse, error)
	SetNoncesAndSign(context.Context, *SetNoncesAndSignRequest) (*SetNoncesAndSignResponse, error)
	GetNonces(context.Context, *GetNoncesRequest) (*GetNoncesResponse, error)
	TransferLeadership(context.Context, *TransferLeadershipRequest) (*TransferLeadershipResponse, error)
	GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error)
}

// UnimplementedCosignerServer can be embedded to have forward compatible implementations.
type UnimplementedCosignerServer struct {
}

func (*UnimplementedCosignerServer) SignBlock(ctx context.Context, req *SignBlockRequest) (*SignBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBlock not implemented")
}
func (*UnimplementedCosignerServer) SetNoncesAndSign(ctx context.Context, req *SetNoncesAndSignRequest) (*SetNoncesAndSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNoncesAndSign not implemented")
}
func (*UnimplementedCosignerServer) GetNonces(ctx context.Context, req *GetNoncesRequest) (*GetNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonces not implemented")
}
func (*UnimplementedCosignerServer) TransferLeadership(ctx context.Context, req *TransferLeadershipRequest) (*TransferLeadershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferLeadership not implemented")
}
func (*UnimplementedCosignerServer) GetLeader(ctx context.Context, req *GetLeaderRequest) (*GetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}

func RegisterCosignerServer(s grpc1.Server, srv CosignerServer) {
	s.RegisterService(&_Cosigner_serviceDesc, srv)
}

func _Cosigner_SignBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).SignBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.Cosigner/SignBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).SignBlock(ctx, req.(*SignBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosigner_SetNoncesAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNoncesAndSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).SetNoncesAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.Cosigner/SetNoncesAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).SetNoncesAndSign(ctx, req.(*SetNoncesAndSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosigner_GetNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).GetNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.Cosigner/GetNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).GetNonces(ctx, req.(*GetNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosigner_TransferLeadership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferLeadershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).TransferLeadership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.Cosigner/TransferLeadership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).TransferLeadership(ctx, req.(*TransferLeadershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosigner_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strangelove.horcrux.Cosigner/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cosigner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "strangelove.horcrux.Cosigner",
	HandlerType: (*CosignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignBlock",
			Handler:    _Cosigner_SignBlock_Handler,
		},
		{
			MethodName: "SetNoncesAndSign",
			Handler:    _Cosigner_SetNoncesAndSign_Handler,
		},
		{
			MethodName: "GetNonces",
			Handler:    _Cosigner_GetNonces_Handler,
		},
		{
			MethodName: "TransferLeadership",
			Handler:    _Cosigner_TransferLeadership_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _Cosigner_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strangelove/horcrux/cosigner_grpc_server.proto",
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SignBytes) > 0 {
		i -= len(m.SignBytes)
		copy(dAtA[i:], m.SignBytes)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.SignBytes)))
		i--
		dAtA[i] = 0x22
	}
	if m.Step != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Nonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Share) > 0 {
		i -= len(m.Share)
		copy(dAtA[i:], m.Share)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.Share)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationID != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.DestinationID))
		i--
		dAtA[i] = 0x10
	}
	if m.SourceID != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.SourceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HRST) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HRST) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HRST) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Step != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetNoncesAndSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNoncesAndSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetNoncesAndSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SignBytes) > 0 {
		i -= len(m.SignBytes)
		copy(dAtA[i:], m.SignBytes)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.SignBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Hrst != nil {
		{
			size, err := m.Hrst.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nonces) > 0 {
		for iNdEx := len(m.Nonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetNoncesAndSignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNoncesAndSignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetNoncesAndSignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NoncePublic) > 0 {
		i -= len(m.NoncePublic)
		copy(dAtA[i:], m.NoncePublic)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.NoncePublic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Hrst != nil {
		{
			size, err := m.Hrst.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonces) > 0 {
		for iNdEx := len(m.Nonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransferLeadershipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLeadershipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferLeadershipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeaderID) > 0 {
		i -= len(m.LeaderID)
		copy(dAtA[i:], m.LeaderID)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.LeaderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferLeadershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLeadershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferLeadershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeaderAddress) > 0 {
		i -= len(m.LeaderAddress)
		copy(dAtA[i:], m.LeaderAddress)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.LeaderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LeaderID) > 0 {
		i -= len(m.LeaderID)
		copy(dAtA[i:], m.LeaderID)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.LeaderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetLeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Leader) > 0 {
		i -= len(m.Leader)
		copy(dAtA[i:], m.Leader)
		i = encodeVarintCosignerGrpcServer(dAtA, i, uint64(len(m.Leader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCosignerGrpcServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovCosignerGrpcServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Round))
	}
	if m.Step != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Step))
	}
	l = len(m.SignBytes)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Timestamp))
	}
	return n
}

func (m *SignBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *SignBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *Nonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceID != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.SourceID))
	}
	if m.DestinationID != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.DestinationID))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *HRST) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Round))
	}
	if m.Step != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Step))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Timestamp))
	}
	return n
}

func (m *SetNoncesAndSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nonces) > 0 {
		for _, e := range m.Nonces {
			l = e.Size()
			n += 1 + l + sovCosignerGrpcServer(uint64(l))
		}
	}
	if m.Hrst != nil {
		l = m.Hrst.Size()
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	l = len(m.SignBytes)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *SetNoncesAndSignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NoncePublic)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCosignerGrpcServer(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *GetNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hrst != nil {
		l = m.Hrst.Size()
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *GetNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nonces) > 0 {
		for _, e := range m.Nonces {
			l = e.Size()
			n += 1 + l + sovCosignerGrpcServer(uint64(l))
		}
	}
	return n
}

func (m *TransferLeadershipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LeaderID)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *TransferLeadershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LeaderID)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	l = len(m.LeaderAddress)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func (m *GetLeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetLeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovCosignerGrpcServer(uint64(l))
	}
	return n
}

func sovCosignerGrpcServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCosignerGrpcServer(x uint64) (n int) {
	return sovCosignerGrpcServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignBytes = append(m.SignBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignBytes == nil {
				m.SignBytes = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			m.SourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationID", wireType)
			}
			m.DestinationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HRST) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HRST: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HRST: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNoncesAndSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetNoncesAndSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetNoncesAndSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonces = append(m.Nonces, &Nonce{})
			if err := m.Nonces[len(m.Nonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hrst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hrst == nil {
				m.Hrst = &HRST{}
			}
			if err := m.Hrst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignBytes = append(m.SignBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignBytes == nil {
				m.SignBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNoncesAndSignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetNoncesAndSignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetNoncesAndSignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoncePublic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoncePublic = append(m.NoncePublic[:0], dAtA[iNdEx:postIndex]...)
			if m.NoncePublic == nil {
				m.NoncePublic = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hrst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hrst == nil {
				m.Hrst = &HRST{}
			}
			if err := m.Hrst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonces = append(m.Nonces, &Nonce{})
			if err := m.Nonces[len(m.Nonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLeadershipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLeadershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLeadershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLeadershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLeadershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLeadershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosignerGrpcServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosignerGrpcServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCosignerGrpcServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCosignerGrpcServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCosignerGrpcServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCosignerGrpcServer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCosignerGrpcServer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCosignerGrpcServer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCosignerGrpcServer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCosignerGrpcServer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCosignerGrpcServer = fmt.Errorf("proto: unexpected end of group")
)
