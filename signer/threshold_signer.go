package signer

import "time"

const (
	CosignerKeyTypeEd25519 = "ed25519"
	CosignerKeyTypeBn254   = "bn254"
)

// Interface for the local signer whether it's a soft sign or HSM
type ThresholdSigner interface {
	// PubKey returns the public key bytes for the combination of all cosigners.
	PubKey() []byte

	// Sign signs a byte payload with the provided nonces.
	Sign(nonces []Nonce, payload []byte) ([]byte, error)

	// CombineSignatures combines multiple partial signatures to a full signature.
	CombineSignatures([]PartialSignature) ([]byte, error)

	// VerifySignature verifies a signature against a payload and public key.
	VerifySignature(payload, signature []byte) bool
}

// Nonces contains the ephemeral information generated by one cosigner for all other cosigners.
type Nonces struct {
	PubKey []byte
	Shares [][]byte
}

type NoncesWithExpiration struct {
	Expiration time.Time
	Nonces     []Nonces
}

// Nonce is the ephemeral information from another cosigner destined for this cosigner.
type Nonce struct {
	ID     int
	Share  []byte
	PubKey []byte
}

// PartialSignature contains the signature and identifier for a piece of the combined signature.
type PartialSignature struct {
	ID        int
	Signature []byte
}
