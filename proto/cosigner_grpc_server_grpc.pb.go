// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: signer/proto/cosigner_grpc_server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CosignerGRPCClient is the client API for CosignerGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosignerGRPCClient interface {
	SignBlock(ctx context.Context, in *CosignerGRPCSignBlockRequest, opts ...grpc.CallOption) (*CosignerGRPCSignBlockResponse, error)
	SetEphemeralSecretPartsAndSign(ctx context.Context, in *CosignerGRPCSetEphemeralSecretPartsAndSignRequest, opts ...grpc.CallOption) (*CosignerGRPCSetEphemeralSecretPartsAndSignResponse, error)
	GetEphemeralSecretParts(ctx context.Context, in *CosignerGRPCGetEphemeralSecretPartsRequest, opts ...grpc.CallOption) (*CosignerGRPCGetEphemeralSecretPartsResponse, error)
	TransferLeadership(ctx context.Context, in *CosignerGRPCTransferLeadershipRequest, opts ...grpc.CallOption) (*CosignerGRPCTransferLeadershipResponse, error)
}

type cosignerGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewCosignerGRPCClient(cc grpc.ClientConnInterface) CosignerGRPCClient {
	return &cosignerGRPCClient{cc}
}

func (c *cosignerGRPCClient) SignBlock(ctx context.Context, in *CosignerGRPCSignBlockRequest, opts ...grpc.CallOption) (*CosignerGRPCSignBlockResponse, error) {
	out := new(CosignerGRPCSignBlockResponse)
	err := c.cc.Invoke(ctx, "/proto.CosignerGRPC/SignBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerGRPCClient) SetEphemeralSecretPartsAndSign(ctx context.Context, in *CosignerGRPCSetEphemeralSecretPartsAndSignRequest, opts ...grpc.CallOption) (*CosignerGRPCSetEphemeralSecretPartsAndSignResponse, error) {
	out := new(CosignerGRPCSetEphemeralSecretPartsAndSignResponse)
	err := c.cc.Invoke(ctx, "/proto.CosignerGRPC/SetEphemeralSecretPartsAndSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerGRPCClient) GetEphemeralSecretParts(ctx context.Context, in *CosignerGRPCGetEphemeralSecretPartsRequest, opts ...grpc.CallOption) (*CosignerGRPCGetEphemeralSecretPartsResponse, error) {
	out := new(CosignerGRPCGetEphemeralSecretPartsResponse)
	err := c.cc.Invoke(ctx, "/proto.CosignerGRPC/GetEphemeralSecretParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerGRPCClient) TransferLeadership(ctx context.Context, in *CosignerGRPCTransferLeadershipRequest, opts ...grpc.CallOption) (*CosignerGRPCTransferLeadershipResponse, error) {
	out := new(CosignerGRPCTransferLeadershipResponse)
	err := c.cc.Invoke(ctx, "/proto.CosignerGRPC/TransferLeadership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosignerGRPCServer is the server API for CosignerGRPC service.
// All implementations must embed UnimplementedCosignerGRPCServer
// for forward compatibility
type CosignerGRPCServer interface {
	SignBlock(context.Context, *CosignerGRPCSignBlockRequest) (*CosignerGRPCSignBlockResponse, error)
	SetEphemeralSecretPartsAndSign(context.Context, *CosignerGRPCSetEphemeralSecretPartsAndSignRequest) (*CosignerGRPCSetEphemeralSecretPartsAndSignResponse, error)
	GetEphemeralSecretParts(context.Context, *CosignerGRPCGetEphemeralSecretPartsRequest) (*CosignerGRPCGetEphemeralSecretPartsResponse, error)
	TransferLeadership(context.Context, *CosignerGRPCTransferLeadershipRequest) (*CosignerGRPCTransferLeadershipResponse, error)
	mustEmbedUnimplementedCosignerGRPCServer()
}

// UnimplementedCosignerGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedCosignerGRPCServer struct {
}

func (UnimplementedCosignerGRPCServer) SignBlock(context.Context, *CosignerGRPCSignBlockRequest) (*CosignerGRPCSignBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignBlock not implemented")
}
func (UnimplementedCosignerGRPCServer) SetEphemeralSecretPartsAndSign(context.Context, *CosignerGRPCSetEphemeralSecretPartsAndSignRequest) (*CosignerGRPCSetEphemeralSecretPartsAndSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEphemeralSecretPartsAndSign not implemented")
}
func (UnimplementedCosignerGRPCServer) GetEphemeralSecretParts(context.Context, *CosignerGRPCGetEphemeralSecretPartsRequest) (*CosignerGRPCGetEphemeralSecretPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEphemeralSecretParts not implemented")
}
func (UnimplementedCosignerGRPCServer) TransferLeadership(context.Context, *CosignerGRPCTransferLeadershipRequest) (*CosignerGRPCTransferLeadershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferLeadership not implemented")
}
func (UnimplementedCosignerGRPCServer) mustEmbedUnimplementedCosignerGRPCServer() {}

// UnsafeCosignerGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosignerGRPCServer will
// result in compilation errors.
type UnsafeCosignerGRPCServer interface {
	mustEmbedUnimplementedCosignerGRPCServer()
}

func RegisterCosignerGRPCServer(s grpc.ServiceRegistrar, srv CosignerGRPCServer) {
	s.RegisterService(&CosignerGRPC_ServiceDesc, srv)
}

func _CosignerGRPC_SignBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosignerGRPCSignBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerGRPCServer).SignBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CosignerGRPC/SignBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerGRPCServer).SignBlock(ctx, req.(*CosignerGRPCSignBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosignerGRPC_SetEphemeralSecretPartsAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosignerGRPCSetEphemeralSecretPartsAndSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerGRPCServer).SetEphemeralSecretPartsAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CosignerGRPC/SetEphemeralSecretPartsAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerGRPCServer).SetEphemeralSecretPartsAndSign(ctx, req.(*CosignerGRPCSetEphemeralSecretPartsAndSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosignerGRPC_GetEphemeralSecretParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosignerGRPCGetEphemeralSecretPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerGRPCServer).GetEphemeralSecretParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CosignerGRPC/GetEphemeralSecretParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerGRPCServer).GetEphemeralSecretParts(ctx, req.(*CosignerGRPCGetEphemeralSecretPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosignerGRPC_TransferLeadership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosignerGRPCTransferLeadershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerGRPCServer).TransferLeadership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CosignerGRPC/TransferLeadership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerGRPCServer).TransferLeadership(ctx, req.(*CosignerGRPCTransferLeadershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CosignerGRPC_ServiceDesc is the grpc.ServiceDesc for CosignerGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CosignerGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CosignerGRPC",
	HandlerType: (*CosignerGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignBlock",
			Handler:    _CosignerGRPC_SignBlock_Handler,
		},
		{
			MethodName: "SetEphemeralSecretPartsAndSign",
			Handler:    _CosignerGRPC_SetEphemeralSecretPartsAndSign_Handler,
		},
		{
			MethodName: "GetEphemeralSecretParts",
			Handler:    _CosignerGRPC_GetEphemeralSecretParts_Handler,
		},
		{
			MethodName: "TransferLeadership",
			Handler:    _CosignerGRPC_TransferLeadership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signer/proto/cosigner_grpc_server.proto",
}
